[metadata]
name = ageUpscaling
version = 1.0.0
author = Simon Besnard
author_email = besnard@gfz-potsdam.de
license = Apache
description = ageUpscaling is a South Pole package for classifying land cover using ML and DL methods with Python
long_description_content_type=text/x-rst
long_description =
    **ageUpscaling** is a South Pole package for classifying land cover using ML and DL methods with Python

url = "https://git.gfz-potsdam.de/global-land-monitoring/forest-age-upscale
classifiers =
    Development Status :: 5 - Production/Stable
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
    Intended Audience :: Science/Research
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Topic :: Scientific/Engineering
    Environment :: Console
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: POSIX :: Linux
    Operating System :: Unix
    Operating System :: MacOS
    Operating System :: Microsoft :: Windows
        
[options]
packages = find:
zip_safe = False  # https://mypy.readthedocs.io/en/latest/installed_packages.html
include_package_data = True
python_requires = >=3.10
install_requires =
    xarray==2022.3.0
    zarr==2.10.3
    netCDF4==1.6.0
    dask==2022.11.0 
    scikit-learn==1.1.3
    Boruta==0.3
    numpy==1.23.4
    optuna==3.0.3
    PyYAML==6.0
    matplotlib==3.6.2
    importlib-metadata; python_version < '3.8'
    typing_extensions >= 3.7; python_version < '3.8'
    
[options.extras_require]
io =
    netCDF4
    h5netcdf
    scipy
    pydap
    fsspec
    cftime
    cfgrib
    pooch

accel =
    bottleneck
    numbagg
    
viz =
    matplotlib
    seaborn
    nc-time-axis

complete =
    %(io)s
    %(accel)s
    %(parallel)s
    %(viz)s
    
all =
    pyscaffoldext-markdown>=0.4
    pyscaffoldext-custom-extension>=0.6
    pyscaffoldext-dsproject>=0.5
    pyscaffoldext-django>=0.1.1
    pyscaffoldext-cookiecutter>=0.1
    pyscaffoldext-travis>=0.3
    virtualenv
    pre-commit
md =
    pyscaffoldext-markdown>=0.4
ds =
    pyscaffoldext-dsproject>=0.5
testing =
    # Used for building/installing during tests
    setuptools
    setuptools_scm[toml]
    wheel
    build
    #
    tomlkit     # as dependency in `-e fast`
    certifi     # tries to prevent certificate problems on windows
    tox         # system tests use tox inside tox
    pre-commit  # system tests run pre-commit
    sphinx      # system tests build docs
    flake8      # system tests run flake8
    virtualenv  # virtualenv as dependency for the venv extension in `-e fast`
    pytest
    pytest-cov
    pytest-shutil
    pytest-virtualenv
    pytest-fixture-config
    pytest-xdist
    pytest-randomly
    # We keep pytest-xdist in the test dependencies, so the developer can
    # easily opt-in for distributed tests by adding, for example, the `-n 15`
    # arguments in the command-line.   
    
[flake8]
ignore =
    E203 # whitespace before ':' - doesn't work well with black
    E402 # module level import not at top of file
    E501 # line too long - let black worry about that
    E731 # do not assign a lambda expression, use a def
    W503 # line break before binary operator
exclude=
    .eggs
    doc

[options.entry_points]
console_scripts =
    putup = pyscaffold.cli:run
pyscaffold.cli =
    config = pyscaffold.extensions.config:Config
    interactive = pyscaffold.extensions.interactive:Interactive
    venv = pyscaffold.extensions.venv:Venv
    namespace = pyscaffold.extensions.namespace:Namespace
    no_skeleton = pyscaffold.extensions.no_skeleton:NoSkeleton
    pre_commit = pyscaffold.extensions.pre_commit:PreCommit
    no_tox = pyscaffold.extensions.no_tox:NoTox
    cirrus = pyscaffold.extensions.cirrus:Cirrus
    gitlab = pyscaffold.extensions.gitlab_ci:GitLab
    github_actions = pyscaffold.extensions.github_actions:GithubActions
    no_pyproject = pyscaffold.extensions.no_pyproject:NoPyProject

[tool:pytest]
# Options for pytest:
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junit-xml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov pyscaffold --cov-config .coveragerc --cov-report term-missing
    --verbose
#    In order to use xdist, the developer can add, for example, the following
#    arguments:
#    --numprocesses=auto
norecursedirs =
    dist
    build
    .tox
testpaths = tests
markers =
    only: for debugging purposes, a single, failing, test can be required to run
    slow: mark tests as slow (deselect with '-m "not slow"')
    system: mark system tests
    original_logger: do not isolate logger in specific tests
    no_fake_config_dir: avoid the autofixture fake_config_dir to take effect
    requires_src: tests that require the raw source of PyScaffold and assume our default CI environment
log_level = DEBUG
log_cli = True
log_cli_level = CRITICAL
junit_family = xunit2

[isort]
profile = black
skip_gitignore = true
float_to_top = true
default_section = THIRDPARTY
known_first_party = splcClassifier

[mypy]
ignore_missing_imports = True
pretty = True
show_error_codes = True
show_error_context = True
show_traceback = True

